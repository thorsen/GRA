package calculos;

import RA.AsuntoIncert;
import RA.NormaRA;
import RA.TipoIncert;
import general.Auxiliares;
import general.ComboBoxObject;
import general.DecimalFormatRenderer;
import general.MensajeApp;
import general.TratFechas;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Incertidumbres extends javax.swing.JDialog {
    private Integer idAsunto;
    private Long desdeFechaOrig;
    private Integer idNormaOrig;
    
    public Incertidumbres(java.awt.Frame parent, Integer idAsunto, Long desdeFechaOrig, Integer idNorma) {
        super(parent, true);
        initComponents();
        
        this.idAsunto = idAsunto;
        this.desdeFechaOrig = desdeFechaOrig;
        this.idNormaOrig = idNorma;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpPrincipal = new javax.swing.JPanel();
        jpClave = new javax.swing.JPanel();
        jlDesdeFecha = new javax.swing.JLabel();
        jsDesdeFecha = new general.JSpinnerDate();
        jlNorma = new javax.swing.JLabel();
        jcbNorma = new javax.swing.JComboBox();
        jbAceptar = new javax.swing.JButton();
        jpIncert = new javax.swing.JPanel();
        jspIncert = new javax.swing.JScrollPane();
        jtIncert = new general.JTableExport();
        jbCancelar = new javax.swing.JButton();
        jbGuardar = new javax.swing.JButton();
        jbEliminar = new javax.swing.JButton();
        jpHistorico = new javax.swing.JPanel();
        jspHistorico = new javax.swing.JScrollPane();
        jtHistorico = new general.JTableExport();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("INCERTIDUMBRES");
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jpPrincipal.setBackground(new java.awt.Color(255, 255, 255));

        jpClave.setBackground(new java.awt.Color(255, 255, 255));
        jpClave.setBorder(javax.swing.BorderFactory.createTitledBorder("Clave"));

        jlDesdeFecha.setText("Desde Fecha:");

        jsDesdeFecha.setBackground(new java.awt.Color(204, 204, 204));
        jsDesdeFecha.setName("Desde Periodo"); // NOI18N

        jlNorma.setText("Norma:");

        jcbNorma.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));

        jbAceptar.setText("Aceptar");
        jbAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valiClave(evt);
            }
        });

        javax.swing.GroupLayout jpClaveLayout = new javax.swing.GroupLayout(jpClave);
        jpClave.setLayout(jpClaveLayout);
        jpClaveLayout.setHorizontalGroup(
            jpClaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpClaveLayout.createSequentialGroup()
                .addComponent(jlDesdeFecha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jsDesdeFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jlNorma)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbNorma, 0, 197, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jbAceptar))
        );
        jpClaveLayout.setVerticalGroup(
            jpClaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpClaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jlDesdeFecha)
                .addComponent(jsDesdeFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jbAceptar)
                .addComponent(jlNorma)
                .addComponent(jcbNorma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jpIncert.setBackground(new java.awt.Color(255, 255, 255));
        jpIncert.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos"));

        jtIncert.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Incertidumbre", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtIncert.getTableHeader().setReorderingAllowed(false);
        jspIncert.setViewportView(jtIncert);

        jbCancelar.setText("Cancelar");
        jbCancelar.setEnabled(false);
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar(evt);
            }
        });

        jbGuardar.setText("Guardar");
        jbGuardar.setEnabled(false);
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar(evt);
            }
        });

        jbEliminar.setText("Eliminar");
        jbEliminar.setEnabled(false);
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar(evt);
            }
        });

        javax.swing.GroupLayout jpIncertLayout = new javax.swing.GroupLayout(jpIncert);
        jpIncert.setLayout(jpIncertLayout);
        jpIncertLayout.setHorizontalGroup(
            jpIncertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpIncertLayout.createSequentialGroup()
                .addComponent(jspIncert, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jpIncertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jpIncertLayout.setVerticalGroup(
            jpIncertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpIncertLayout.createSequentialGroup()
                .addComponent(jbGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbEliminar))
            .addComponent(jspIncert, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jpHistorico.setBackground(new java.awt.Color(255, 255, 255));
        jpHistorico.setBorder(javax.swing.BorderFactory.createTitledBorder("Hist√≥rico"));

        jtHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Desde Fecha", "Norma"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtHistorico.getTableHeader().setReorderingAllowed(false);
        jtHistorico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtHistoricoMouseClicked(evt);
            }
        });
        jspHistorico.setViewportView(jtHistorico);

        javax.swing.GroupLayout jpHistoricoLayout = new javax.swing.GroupLayout(jpHistorico);
        jpHistorico.setLayout(jpHistoricoLayout);
        jpHistoricoLayout.setHorizontalGroup(
            jpHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspHistorico, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
        );
        jpHistoricoLayout.setVerticalGroup(
            jpHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jpPrincipalLayout = new javax.swing.GroupLayout(jpPrincipal);
        jpPrincipal.setLayout(jpPrincipalLayout);
        jpPrincipalLayout.setHorizontalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jpHistorico, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpIncert, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpClave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jpPrincipalLayout.setVerticalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpIncert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-593)/2, (screenSize.height-401)/2, 593, 401);
    }// </editor-fold>//GEN-END:initComponents

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    this.jtIncert.getColumnModel().getColumn(1).setCellRenderer(new DecimalFormatRenderer());

    iniCampos();

    cargaHistorico();
}//GEN-LAST:event_formWindowOpened

private void valiClave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valiClave
    Integer idNorma = (Integer) ComboBoxObject.getClaveSelCombo(this.jcbNorma);
    
    if (idNorma != null) {
        cargaIncerts();
    } else {
        MensajeApp.muestraWarning(this, "Debe especificar una norma para introducir las incertidumbres");
    }
}//GEN-LAST:event_valiClave

private void jtHistoricoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtHistoricoMouseClicked
    if (evt.getClickCount() == 2 && !evt.isConsumed()) {
        evt.consume();
        
        DefaultTableModel dtmHistorico = (DefaultTableModel) this.jtHistorico.getModel();
        int fila = this.jtHistorico.getSelectedRow();
        
        String desdeFecha = (String) dtmHistorico.getValueAt(fila, 0);
        String descNorma = (String) dtmHistorico.getValueAt(fila, 1);
        
        this.jsDesdeFecha.setText(desdeFecha);
        this.jcbNorma.setSelectedItem(ComboBoxObject.getItemWithValue(this.jcbNorma, descNorma));
        
        cargaIncerts();
    }
}//GEN-LAST:event_jtHistoricoMouseClicked

private void cancelar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar
    iniCampos();
    limpiarFilasIncerts();
    cambioClaveDatos(true);
}//GEN-LAST:event_cancelar

private void guardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar
    try {
        if (this.jtIncert.isEditing())
            this.jtIncert.getCellEditor().stopCellEditing();
        
        DefaultTableModel dtmIncert = (DefaultTableModel) this.jtIncert.getModel();
        int nFilas = dtmIncert.getRowCount();

        Long desdeFecha = this.jsDesdeFecha.getTimeInMillis();
        Integer idNorma = (Integer) ComboBoxObject.getClaveSelCombo(this.jcbNorma);

        Integer idTipoIncert;
        ArrayList<TipoIncert> tiposIncertNorma = TipoIncert.getTiposIncertPorIdNorma(idNorma);
        int nTipos = tiposIncertNorma != null ? tiposIncertNorma.size() : 0;
        String descTipoIncert;
        Double valor;
        AsuntoIncert incertVieja, incertNueva;

        for (int i = 0; i < nFilas; i++) {
            descTipoIncert = (String) dtmIncert.getValueAt(i, 0);
            valor = (Double) dtmIncert.getValueAt(i, 1);

            if (valor != null) {
                idTipoIncert = null;

                for (int j = 0; j < nTipos; j++) {
                    if (descTipoIncert.contentEquals(tiposIncertNorma.get(j).getDescripcion())) {
                        idTipoIncert = tiposIncertNorma.get(j).getIdTipoIncert();
                        break;
                    }
                }

                incertVieja = new AsuntoIncert(this.idAsunto, desdeFecha, idNorma, idTipoIncert, null);
                incertNueva = new AsuntoIncert(this.idAsunto, desdeFecha, idNorma, idTipoIncert, valor);

                AsuntoIncert.insertOrUpdateAsuntoIncert(incertVieja, incertNueva, null);
            }
        }
        //Actualizamos el hist√≥rico
        cargaHistorico();
        //Salimos de la edici√≥n de datos
        cancelar(null);
    } catch (SQLException e) {
        MensajeApp.muestraError(this, e, "Fallo al consultar la base de datos");
    } catch (NoSuchFieldException e) {
        MensajeApp.muestraError(this, e, "Fallo a√±adiendo campo");
    }
}//GEN-LAST:event_guardar

private void eliminar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar
    try {
        if (JOptionPane.showConfirmDialog(this, "¬øDesea eliminar las incertidumbres para la fecha y norma dadas? Esta operaci√≥n es irreversible.", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Long desdeFecha = this.jsDesdeFecha.getTimeInMillis();
            Integer idNorma = (Integer) ComboBoxObject.getClaveSelCombo(this.jcbNorma);

            AsuntoIncert.deleteAsuntoIncerts(this.idAsunto, desdeFecha, idNorma, null, null, null);
            
            //Actualizamos el hist√≥rico
            cargaHistorico();
            //Salimos de la edici√≥n de datos
            cancelar(null);
        }
    } catch (SQLException e) {
        MensajeApp.muestraError(this, e, "Fallo al consultar la base de datos");
    }
}//GEN-LAST:event_eliminar

private void cargaHistorico() {
    try {
        DefaultTableModel dtmHistorico = (DefaultTableModel) this.jtHistorico.getModel();
        dtmHistorico.setRowCount(0);
        
        ArrayList<String> campos = new ArrayList<String>();
        campos.add(AsuntoIncert.CAMPO_ID_ASUNTO);
        campos.add(AsuntoIncert.CAMPO_DESDE_FECHA);
        campos.add(AsuntoIncert.CAMPO_ID_NORMA);
        ArrayList<AsuntoIncert> incertsNorma = AsuntoIncert.getAsuntoIncerts(this.idAsunto, null, null, null, null, campos, null, true);

        int nIncerts = incertsNorma != null ? incertsNorma.size() : 0;

        AsuntoIncert asuntoIncert;
        NormaRA norma;
        for (int i = 0; i < nIncerts; i++) {
            asuntoIncert = incertsNorma.get(i);
            norma = NormaRA.getNormaPorId(asuntoIncert.getIdNorma());

            dtmHistorico.addRow(new Object[]{TratFechas.toStringFecha(asuntoIncert.getDesdeFecha()), norma.getNombre()});        
        }
    } catch (SQLException e) {
        MensajeApp.muestraError(this, e, "Fallo al consultar la base de datos");
    } catch (NoSuchFieldException e) {
        MensajeApp.muestraError(this, e, "Fallo a√±adiendo campo");
    }
}

private void iniCampos() {
    try {
        this.jsDesdeFecha.setTimeInMillis(this.desdeFechaOrig);

        Auxiliares.cargaNormas(this.jcbNorma);
        this.jcbNorma.setSelectedItem(ComboBoxObject.getItemWithKey(this.jcbNorma, this.idNormaOrig));
    } catch (SQLException e) {
        MensajeApp.muestraError(this, e, "Fallo al consultar la base de datos");
    } catch (NoSuchFieldException e) {
        MensajeApp.muestraError(this, e, "Fallo a√±adiendo campo");
    }
}

private void cargaIncerts() {
    try {
        cambioClaveDatos(false);
        
        Integer idNorma = (Integer) ComboBoxObject.getClaveSelCombo(this.jcbNorma);
        Long desdeFecha = this.jsDesdeFecha.getTimeInMillis();

        DefaultTableModel dtmIncerts = (DefaultTableModel) this.jtIncert.getModel();

        ArrayList<TipoIncert> tiposIncert = TipoIncert.getTiposIncertPorIdNorma(idNorma);
        int nTipos = tiposIncert != null ? tiposIncert.size() : 0;

        ArrayList<AsuntoIncert> asuntoIncerts;
        Double valor;
        TipoIncert tipoIncert;
        
        for (int i = 0; i < nTipos; i++) {
            tipoIncert = tiposIncert.get(i);
            
            asuntoIncerts = AsuntoIncert.getAsuntoIncerts(this.idAsunto, desdeFecha, idNorma, tipoIncert.getIdTipoIncert(), null, null, null, null);
            
            valor = asuntoIncerts != null && asuntoIncerts.size() > 0 ? asuntoIncerts.get(0).getValor() : null;
            
            dtmIncerts.addRow(new Object[]{tipoIncert.getDescripcion(), valor});
        }
    } catch (SQLException e) {
        MensajeApp.muestraError(this, e, "Fallo al consultar la base de datos");
    } catch (NoSuchFieldException e) {
        MensajeApp.muestraError(this, e, "Fallo a√±adiendo campo");
    }
}

private void limpiarFilasIncerts() {
    DefaultTableModel dtmIncerts = (DefaultTableModel) this.jtIncert.getModel();
    dtmIncerts.setRowCount(0);
}

private void cambioClaveDatos(boolean cambioHaciaClave) {
    //Campos de la clave
    this.jsDesdeFecha.setEnabled(cambioHaciaClave);
    this.jcbNorma.setEnabled(cambioHaciaClave);
    this.jbAceptar.setEnabled(cambioHaciaClave);
    
    //Campos de los datos
    if (!cambioHaciaClave) {
        limpiarFilasIncerts();
        
        this.jbCancelar.requestFocus();
    } else {
        this.jsDesdeFecha.requestFocus();
    }
    this.jbGuardar.setEnabled(!cambioHaciaClave);
    this.jbCancelar.setEnabled(!cambioHaciaClave);
    this.jbEliminar.setEnabled(!cambioHaciaClave);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAceptar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JComboBox jcbNorma;
    private javax.swing.JLabel jlDesdeFecha;
    private javax.swing.JLabel jlNorma;
    private javax.swing.JPanel jpClave;
    private javax.swing.JPanel jpHistorico;
    private javax.swing.JPanel jpIncert;
    private javax.swing.JPanel jpPrincipal;
    public general.JSpinnerDate jsDesdeFecha;
    private javax.swing.JScrollPane jspHistorico;
    private javax.swing.JScrollPane jspIncert;
    private general.JTableExport jtHistorico;
    private general.JTableExport jtIncert;
    // End of variables declaration//GEN-END:variables

}
